var pauseClouds = false;

function cloudSketch(processing){
    var background, plane, cloudRows, numRows = 12;
    
    processing.setup = function(){
        setCanvasSize();
        $(window).resize(function() { 
            processing.size($("#header").width(), $("#header").height()); 
            background = generateGradient(processing.color(13, 12, 80), processing.color(125, 125, 255), 0, 0, processing.width, processing.height); 
        } ).trigger("resize");
        plane = new airplane(1, 300);
        processing.background(255);
        cloudRows = [];
        var rowIdx = numRows;
        for (var y = processing.height + 16; y > processing.height - (numRows * 16); y -= 16) {
            var row = new cloudRow(y, rowIdx, processing.height - (numRows * 16));
            cloudRows.push(row);
            rowIdx--;
        }
    };
    processing.draw = function(){
        if (pauseClouds)
            return;
        processing.image(background, 0, 0);
        plane.draw();
        if (plane.dead && Math.random() < 0.01) {
            plane = new airplane(1, 300);
        }
        var scrollTop = $(window).scrollTop();
        for (var r = cloudRows.length - 1; r > 0; r--) {
            cloudRows[r].draw(scrollTop);
        }
    };
    
    function generateGradient(top, bottom, x, y, w, h) {
        var tR = processing.red(top), 
            tG = processing.green(top), 
            tB = processing.blue(top), 
            bR = processing.red(bottom),
            bG = processing.green(bottom), 
            bB = processing.blue(bottom);
        
        var bg = processing.createImage(w, h, processing.RGB);
        bg.loadPixels();
        
        for (var i = 0; i < w * h; i++) {
            var y = i / bg.width;
            var n = y / bg.height;
            bg.pixels.setPixel(i, processing.color(
                processing.lerp(tR, bR, n * n),
                processing.lerp(tG, bG, n * n),
                processing.lerp(tB, bB, n * n),
                255));
        }
        
        bg.updatePixels();
        return bg;
    }
    
    function setCanvasSize() {
        var docWidth = $("#cloud-canvas").width();
        var docHeight = $("#cloud-canvas").height();
        processing.size(docWidth, docHeight);
    }
    
    function airplane(trailWidth, trailLength) {
        this.dead = false;
        this.x = 0;
        this.y = Math.random() * processing.height / 2;
        this.trailWidth = trailWidth;
        this.trailLength = trailLength;
        this.angle = (Math.random() * Math.PI / 16) - (Math.PI / 32);
        if (Math.random() < 0.5)
        {
            this.x = processing.width;
            this.angle -= Math.PI + (Math.PI / 16);
        }
        
        this.draw = function() {
            if (this.x < -this.trailLength || this.y < -this.trailLength || this.x > processing.width + this.trailLength || this.y > processing.height + this.trailLength)
                this.dead = true;
            if (!this.dead) {
                processing.noStroke();
                this.x += Math.cos(this.angle) * 0.3;
                this.y += Math.sin(this.angle) * 0.3;
                var curX, curY;
                for (var t = 0; t < this.trailLength; t++) {
                    processing.fill(processing.color(255, 255, 255, 255 * ( 1.0 - t / this.trailLength )));
                    curX = this.x - Math.cos(this.angle) * t;
                    curY = this.y - Math.sin(this.angle) * t;
                    processing.ellipse(curX, curY, this.trailWidth, this.trailWidth);
                }
            }
        };
    }
    
    function cloudPart(maxSize, x, y, jitter, opacity, color) {
        this.x = x;
        this.y = y;
        this.size = (Math.random() * 64 + (maxSize - 64)) * (opacity / 155);
        this.realSize = 0;
        this.x += (Math.random() < 0.5) ? Math.random() * jitter : Math.random() * -jitter;
        this.y += (Math.random() < 0.5) ? Math.random() * jitter : Math.random() * -jitter;
        this.color = Math.random() * 10 + color;
        this.delayTimer = 0;
        
        this.draw = function(yOffset) {
            if (this.delayTimer < x) {
                this.delayTimer += (processing.width / 16);
                return;
            }
            if (this.realSize < this.size)
                this.realSize += (this.size - this.realSize) * 0.7;
            processing.fill(this.color, this.color, this.color, 255);
            processing.ellipse(this.x, this.y - yOffset + Math.min(this.size, yOffset * (1.0 - (opacity / 255))), this.realSize, this.realSize);
        };
    }
    
    function cloudRow(y, rowIdx, initialDelay) {
        this.cloudSize = 240;
        this.parts = [];
        this.delayTimer = 0;
        var previousSize = 0;
        for (var x = 0; x < processing.width + this.cloudSize; x+=previousSize) {
            if (Math.random() < 0.01 * rowIdx) {
                //skip
                previousSize = this.cloudSize;
            } else {
                var part = new cloudPart(this.cloudSize, x, y, 32, rowIdx / numRows * 170 + 85, rowIdx / numRows * 50 + 205);
                previousSize = part.size/4;
                this.parts.push(part);
            }
        }
        
        this.draw = function(yOffset) {
            if (this.delayTimer < (numRows - rowIdx) * 128) {
                this.delayTimer += 16;
                return;
            }
            for (var i = 0; i < this.parts.length; i++) {
                this.parts[i].draw(yOffset);
            }
        }
    }
}

