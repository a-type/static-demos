roundTo = function(v, step) {
	return Math.ceil(v / step) * step;	
};

var pauseLines = true;

function Line(processing, startX) {
	this.startX = startX;
	this.startPosition = new processing.PVector(startX, 0);
	this.currentPosition = this.startPosition.get();
	this.direction = processing.random(1) > 0.5 ? new processing.PVector(1, 1) : new processing.PVector(-1, 1);
	this.lifetime = processing.random(processing.height * 0.125) + processing.height * 0.75;
	this.age = 0;
	this.dead = false;

	this.draw = function(self, processing) {
		self.age += 1;
		var movement = self.direction.get();
		movement.mult(1);
		self.currentPosition.add(movement);
		processing.strokeWeight(1);
		processing.stroke(155, 155, 155, 255);
		processing.line(self.startPosition.x, self.startPosition.y, self.currentPosition.x, self.currentPosition.y);
		if (self.age > self.lifetime) {
			self.dead = true;
		}
	};

	this.intersects = function(self, other) {
		if (self.startPosition.dist(other.startPosition) == 0) {
			return false;
		}
		var myPos = self.currentPosition.get();
		var otherStart = other.startPosition.get();
		var otherDir = other.direction.get();
		var xDiff = Math.abs(myPos.x - otherStart.x);
		var otherXDist = Math.abs(other.currentPosition.x - other.startPosition.x);
		if (otherXDist < xDiff) {
			return false;
		}
		otherDir.mult(xDiff);
		otherDir.add(otherStart);
		otherDir.sub(myPos);
		if (otherDir.mag() < 0.2) {
			return true;
		} else {
			return false;
		}
	};
}

function Contact(pos) {
	this.position = pos;
	this.radius = 32;
	this.arc = 0;
	this.lifetime = 32;
	this.age = 0;
	this.dead = false;

	this.draw = function(self, processing) {
		self.age += 1;
		self.arc += 0.2094;
		processing.stroke(155, 155, 155, 255);
		processing.noFill();
		processing.strokeWeight(0.5);
		processing.arc(self.position.x, self.position.y, self.radius, self.radius, 0, self.arc);
		if (self.age > self.lifetime) {
			self.dead = true;
		}
	};
}

function sketchProc(processing) {
	processing.myLines = [];
	processing.myContacts = [];
	processing.myTakenX = [];

	processing.setup = function() {
		var canv = document.getElementById("lines-canvas");
		processing.size(canv.offsetWidth, canv.offsetHeight);
	};

	processing.draw = function() {
        if (pauseLines)
            return;
		//processing.rectMode(processing.CORNER);
  		processing.noStroke();
  		processing.fill(200,200,200,5);
  		processing.rect(0,0,processing.width,processing.height);

		if (processing.random(2) <= 0.1) {
			var startX = roundTo(processing.random(processing.width * 1.5) + (processing.width * 0.25), 50);
			if (processing.myTakenX.indexOf(startX) == -1) {
				processing.myTakenX.push(startX);
				processing.myLines.push(new Line(processing, startX));
			}
		}
		var deadLines = [], deadContacts = [];
		if (processing.myLines.length > 0) {
			for (var index = 0; index < processing.myLines.length; index++) {
				var line = processing.myLines[index];
				line.draw(line, processing);
				for (var index2 = 0; index2 < processing.myLines.length; index2++) {
					var otherLine = processing.myLines[index2];
					if (otherLine != line) {
						if (line.intersects(line, otherLine)) {
							processing.myContacts.push(new Contact(line.currentPosition.get()));
						}
					}
				}
				if (line.dead) {
					deadLines.push(index);
				}
			}
		}
		if (processing.myContacts.length > 0) {
			for (var index3 = 0; index3 < processing.myContacts.length; index3++) {
				 var contact = processing.myContacts[index3];
				 contact.draw(contact, processing);
				 if (contact.dead) {
				 	deadContacts.push(index3);
				 }
			}
		}
		if (deadLines.length > 0) {
			for (var index4 = 0; index4 < deadLines.length; index4++) {
				processing.myLines.splice(deadLines[index4], 1);
				var idxX = processing.myTakenX.indexOf(deadLines[index4].startX);
				processing.myTakenX.splice(idxX, 1);
			}
		}
		if (deadContacts.length > 0) {
			for (var index5 = 0; index5 < deadContacts.length; index5++) {
				processing.myContacts.splice(deadContacts[index4], 1);
			}
		}
	};	
}
